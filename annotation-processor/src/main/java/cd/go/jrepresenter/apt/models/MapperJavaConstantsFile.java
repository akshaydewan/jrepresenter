/*
 * Copyright 2017 ThoughtWorks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package cd.go.jrepresenter.apt.models;

import com.squareup.javapoet.ClassName;
import com.squareup.javapoet.JavaFile;
import com.squareup.javapoet.TypeSpec;

import javax.lang.model.element.Modifier;

public class MapperJavaConstantsFile {
    public static final TypeSpecBuilder SETTERS_BUILDER = new TypeSpecBuilder("Setters", "Setter$");
    public static final TypeSpecBuilder CUSTOM_REPRESENTER_BUILDER = new TypeSpecBuilder("ToJSONMappers", "(Deserializer|Mapper)$");
    public static final TypeSpecBuilder GETTERS_BUILDER = new TypeSpecBuilder("Getters", "Getter$");
    public static final TypeSpecBuilder SERIALIZE_BUILDER = new TypeSpecBuilder("Serializers", "Serializer$");
    public static final TypeSpecBuilder DESERIALIZER_BUILDER = new TypeSpecBuilder("Deserializers", "Deserializer$");
    public static final TypeSpecBuilder SKIP_PARSE_BUILDER = new TypeSpecBuilder("SkipParsers", "SkipParse$");
    public static final TypeSpecBuilder SKIP_RENDER_BUILDER = new TypeSpecBuilder("SkipRenderers", "SkipRender");

    public static final ClassName CONSTANTS_CLASS_NAME = ClassName.bestGuess("gen.cd.go.jrepresenter.Constants");

    private final ClassToAnnotationMap context;
    private ClassName modelClass;

    public MapperJavaConstantsFile(ClassToAnnotationMap context) {
        this.context = context;
        this.modelClass = CONSTANTS_CLASS_NAME;
    }

    public ClassName getModelClass() {
        return modelClass;
    }

    public String toSource() {
        TypeSpec.Builder classBuilder = TypeSpec.interfaceBuilder(modelClass.simpleName())
                .addModifiers(Modifier.PUBLIC);

        classBuilder.addType(serializers());
        classBuilder.addType(deserializers());
        classBuilder.addType(getters());
        classBuilder.addType(setters());
        classBuilder.addType(skipParses());
        classBuilder.addType(skipRenders());
        classBuilder.addType(customRepresenters());

        return JavaFile.builder(modelClass.packageName(), classBuilder.build())
                .addFileComment("\n")
                .addFileComment("This file was automatically generated by jrepresenter\n")
                .addFileComment("Any changes may be lost!\n")
                .build().toString();
    }

    private TypeSpec customRepresenters() {
        return CUSTOM_REPRESENTER_BUILDER.build(context.customRepresenters());
    }

    private TypeSpec serializers() {
        return SERIALIZE_BUILDER.build(context.serializers());
    }

    private TypeSpec deserializers() {
        return DESERIALIZER_BUILDER.build(context.deserializers());
    }

    private TypeSpec skipParses() {
        return SKIP_PARSE_BUILDER.build(context.skipParses());
    }

    private TypeSpec skipRenders() {
        return SKIP_RENDER_BUILDER.build(context.skipRenders());
    }

    private TypeSpec getters() {
        return GETTERS_BUILDER.build(context.getters());
    }

    private TypeSpec setters() {
        return SETTERS_BUILDER.build(context.setters());
    }

}
