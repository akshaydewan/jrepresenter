/*
 * Copyright 2017 ThoughtWorks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package cd.go.jrepresenter.apt.models;

import com.squareup.javapoet.ClassName;
import org.junit.Test;

import static cd.go.jrepresenter.apt.models.TestConstants.*;
import static org.assertj.core.api.Assertions.assertThat;

public class MapperJavaConstantsFileTest {

    @Test
    public void shouldGenerateAConstantsFile() {
        RepresenterAnnotation representerAnnotation = RepresenterAnnotationBuilder.aRepresenterAnnotation()
                .withRepresenterClass(TestConstants.USER_REPRESENTER_CLASS)
                .withModelClass(USER_MODEL)
                .withLinksProviderClass(EMPTY_LINKS_PROVIDER)
                .withSkipDeserialize(true)
                .withSkipSerialize(false)
                .build();

        PropertyAnnotation propertyAnnotation = PropertyAnnotationBuilder.aPropertyAnnotation()
                .withSerializerClassName(CASE_INSENSITIVE_STRING_SERIALIZER)
                .withDeserializerClassName(CASE_INSENSITIVE_STRING_DESERIALIZER)
                .withSkipParse(ClassName.bestGuess("com.tw.SkipFooParse"))
                .withSkipRender(ClassName.bestGuess("com.tw.SkipFooRender"))
                .withSetterClassName(TRIGGERED_BY_SETTER)
                .withGetterClassName(FNAME_GETTER)
                .build();
        ClassToAnnotationMap context = new ClassToAnnotationMap();
        context.add(representerAnnotation);
        context.addAnnotatedMethod(representerAnnotation.getRepresenterClass(), propertyAnnotation);

        MapperJavaConstantsFile sourceFile = new MapperJavaConstantsFile(context);
        assertThat(sourceFile.toSource()).isEqualTo("" +
                "//\n" +
                "// This file was automatically generated by jrepresenter\n" +
                "// Any changes may be lost!\n" +
                "//\n" +
                "package gen.cd.go.jrepresenter;\n" +
                "\n" +
                "import com.tw.CaseInsensitiveStringDeserializer;\n" +
                "import com.tw.CaseInsensitiveStringSerializer;\n" +
                "import com.tw.FNameGetter;\n" +
                "import com.tw.SkipFooParse;\n" +
                "import com.tw.SkipFooRender;\n" +
                "import com.tw.TriggeredBySetter;\n" +
                "\n" +
                "public interface Constants {\n" +
                "  interface Serializers {\n" +
                "    CaseInsensitiveStringSerializer CASE_INSENSITIVE_STRING = new CaseInsensitiveStringSerializer();\n" +
                "  }\n" +
                "\n" +
                "  interface Deserializers {\n" +
                "    CaseInsensitiveStringDeserializer CASE_INSENSITIVE_STRING = new CaseInsensitiveStringDeserializer();\n" +
                "  }\n" +
                "\n" +
                "  interface Getters {\n" +
                "    FNameGetter F_NAME = new FNameGetter();\n" +
                "  }\n" +
                "\n" +
                "  interface Setters {\n" +
                "    TriggeredBySetter TRIGGERED_BY = new TriggeredBySetter();\n" +
                "  }\n" +
                "\n" +
                "  interface SkipParsers {\n" +
                "    SkipFooParse SKIP_FOO_PARSE = new SkipFooParse();\n" +
                "  }\n" +
                "\n" +
                "  interface SkipRenderers {\n" +
                "    SkipFooRender SKIP_FOO_RENDER = new SkipFooRender();\n" +
                "  }\n" +
                "}\n");
    }
}